package kirjasto.test;
// Generated by ComTest BEGIN
import kirjasto.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.24 16:09:01 // Generated by ComTest
 *
 */
public class ArtistitTest {



  // Generated by ComTest BEGIN
  /** testLisaa44 */
  @Test
  public void testLisaa44() {    // Artistit: 44
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(); 
    assertEquals("From: Artistit line: 47", 0, artistit.getLkm()); 
    artistit.lisaa(sefa1); assertEquals("From: Artistit line: 48", 1, artistit.getLkm()); 
    artistit.lisaa(sefa2); assertEquals("From: Artistit line: 49", 2, artistit.getLkm()); 
    artistit.lisaa(sefa1); assertEquals("From: Artistit line: 50", 3, artistit.getLkm()); 
    assertEquals("From: Artistit line: 51", sefa1, artistit.anna(0)); 
    assertEquals("From: Artistit line: 52", sefa2, artistit.anna(1)); 
    assertEquals("From: Artistit line: 53", sefa1, artistit.anna(2)); 
    assertEquals("From: Artistit line: 54", false, artistit.anna(1) == sefa1); 
    assertEquals("From: Artistit line: 55", true, artistit.anna(1) == sefa2); 
    try {
    assertEquals("From: Artistit line: 56", sefa1, artistit.anna(3)); 
    fail("Artistit: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    artistit.lisaa(sefa1); assertEquals("From: Artistit line: 57", 4, artistit.getLkm()); 
    artistit.lisaa(sefa1); assertEquals("From: Artistit line: 58", 5, artistit.getLkm()); 
    artistit.lisaa(sefa1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa80 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa80() throws SailoException,CloneNotSupportedException {    // Artistit: 80
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); 
    assertEquals("From: Artistit line: 86", 0, artistit.getLkm()); 
    artistit.korvaaTaiLisaa(sefa1); assertEquals("From: Artistit line: 87", 1, artistit.getLkm()); 
    artistit.korvaaTaiLisaa(sefa2); assertEquals("From: Artistit line: 88", 2, artistit.getLkm()); 
    Artisti sefa3 = sefa1.clone(); 
    Iterator<Artisti> it = artistit.iterator(); 
    assertEquals("From: Artistit line: 91", true, it.next() == sefa1); 
    artistit.korvaaTaiLisaa(sefa3); assertEquals("From: Artistit line: 92", 2, artistit.getLkm()); 
    it = artistit.iterator(); 
    Artisti j0 = it.next(); 
    assertEquals("From: Artistit line: 95", sefa3, j0); 
    assertEquals("From: Artistit line: 96", true, j0 == sefa3); 
    assertEquals("From: Artistit line: 97", false, j0 == sefa1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta133 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta133() throws SailoException {    // Artistit: 133
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(); 
    sefa1.vastaaAkuAnkka(); 
    sefa2.vastaaAkuAnkka(); 
    String hakemisto = "testihardstyle"; 
    String tiedNimi = hakemisto+"/artistiid"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    artistit.lueTiedostosta(tiedNimi); 
    fail("Artistit: 147 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    artistit.lisaa(sefa1); 
    artistit.lisaa(sefa2); 
    artistit.tallenna(); 
    artistit = new Artistit();  // Poistetaan vanhat luomalla uusi
    artistit.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Artisti> i = artistit.iterator(); 
    assertEquals("From: Artistit line: 154", sefa1, i.next()); 
    assertEquals("From: Artistit line: 155", sefa2, i.next()); 
    assertEquals("From: Artistit line: 156", false, i.hasNext()); 
    artistit.lisaa(sefa2); 
    artistit.tallenna(); 
    assertEquals("From: Artistit line: 159", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista226 
   * @throws SailoException when error
   */
  @Test
  public void testPoista226() throws SailoException {    // Artistit: 226
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(), sefa3 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); sefa3.rekisteroi(); 
    int id1 = sefa1.getTunnusNro(); 
    artistit.lisaa(sefa1); artistit.lisaa(sefa2); artistit.lisaa(sefa3); 
    assertEquals("From: Artistit line: 233", 1, artistit.poista(id1+1)); 
    assertEquals("From: Artistit line: 234", null, artistit.annaId(id1+1)); assertEquals("From: Artistit line: 234", 2, artistit.getLkm()); 
    assertEquals("From: Artistit line: 235", 1, artistit.poista(id1)); assertEquals("From: Artistit line: 235", 1, artistit.getLkm()); 
    assertEquals("From: Artistit line: 236", 0, artistit.poista(id1+3)); assertEquals("From: Artistit line: 236", 1, artistit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId256 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId256() throws SailoException {    // Artistit: 256
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(), sefa3 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); sefa3.rekisteroi(); 
    int id1 = sefa1.getTunnusNro(); 
    artistit.lisaa(sefa1); artistit.lisaa(sefa2); artistit.lisaa(sefa3); 
    assertEquals("From: Artistit line: 263", true, artistit.annaId(id1  ) == sefa1); 
    assertEquals("From: Artistit line: 264", true, artistit.annaId(id1+1) == sefa2); 
    assertEquals("From: Artistit line: 265", true, artistit.annaId(id1+2) == sefa3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId280 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId280() throws SailoException {    // Artistit: 280
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(), sefa3 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); sefa3.rekisteroi(); 
    int id1 = sefa1.getTunnusNro(); 
    artistit.lisaa(sefa1); artistit.lisaa(sefa2); artistit.lisaa(sefa3); 
    assertEquals("From: Artistit line: 287", 1, artistit.etsiId(id1+1)); 
    assertEquals("From: Artistit line: 288", 2, artistit.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testArtistitIterator356 
   * @throws SailoException when error
   */
  @Test
  public void testArtistitIterator356() throws SailoException {    // Artistit: 356
    Artistit artistit = new Artistit(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); 
    artistit.lisaa(sefa1); 
    artistit.lisaa(sefa2); 
    artistit.lisaa(sefa1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Artisti artisti:artistit) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+artisti.getTunnusNro()); 
    String tulos = " " + sefa1.getTunnusNro() + " " + sefa2.getTunnusNro() + " " + sefa1.getTunnusNro(); 
    assertEquals("From: Artistit line: 375", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Artisti>  i=artistit.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Artisti artisti = i.next(); 
    ids.append(" "+artisti.getTunnusNro()); 
    }
    assertEquals("From: Artistit line: 383", tulos, ids.toString()); 
    Iterator<Artisti>  i=artistit.iterator(); 
    assertEquals("From: Artistit line: 386", true, i.next() == sefa1); 
    assertEquals("From: Artistit line: 387", true, i.next() == sefa2); 
    assertEquals("From: Artistit line: 388", true, i.next() == sefa1); 
    try {
    i.next(); 
    fail("Artistit: 390 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi450 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi450() throws SailoException {    // Artistit: 450
    Artistit artistit = new Artistit(); 
    Artisti artisti1 = new Artisti(); artisti1.parse("1|Angerfist|137|Hollanti|"); 
    Artisti artisti2 = new Artisti(); artisti2.parse("2|Sefa|40|Hollanti|"); 
    Artisti artisti3 = new Artisti(); artisti3.parse("3|Da Tweekaz|77|Norja|2006"); 
    Artisti artisti4 = new Artisti(); artisti4.parse("4|B-Front|35|Hollanti"); 
    Artisti artisti5 = new Artisti(); artisti5.parse("5|Phuture Noize|60|Hollanti"); 
    artistit.lisaa(artisti1); artistit.lisaa(artisti2); artistit.lisaa(artisti3); artistit.lisaa(artisti4); artistit.lisaa(artisti5); 
  } // Generated by ComTest END
}