package kirjasto.test;
// Generated by ComTest BEGIN
import kirjasto.SailoException;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import kirjasto.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.24 16:09:47 // Generated by ComTest
 *
 */
public class KirjastoTest {


  // Generated by ComTest BEGIN  // Kirjasto: 16
   private Kirjasto kirjasto; 
   private Artisti sefa1; 
   private Artisti sefa2; 
   private int jid1; 
   private int jid2; 
   private Biisi calling21; 
   private Biisi calling11; 
   private Biisi calling22; 
   private Biisi calling12; 
   private Biisi calling23; 

   @SuppressWarnings("javadoc")
   public void alustaKirjasto() {
     kirjasto = new Kirjasto(); 
     sefa1 = new Artisti(); sefa1.vastaaAkuAnkka(); sefa1.rekisteroi(); 
     sefa2 = new Artisti(); sefa2.vastaaAkuAnkka(); sefa2.rekisteroi(); 
     jid1 = sefa1.getTunnusNro(); 
     jid2 = sefa2.getTunnusNro(); 
     calling21 = new Biisi(jid2); calling21.vastaaCalling(jid2); 
     calling11 = new Biisi(jid1); calling11.vastaaCalling(jid1); 
     calling22 = new Biisi(jid2); calling22.vastaaCalling(jid2); 
     calling12 = new Biisi(jid1); calling12.vastaaCalling(jid1); 
     calling23 = new Biisi(jid2); calling23.vastaaCalling(jid2); 
     try {
     kirjasto.lisaa(sefa1); 
     kirjasto.lisaa(sefa2); 
     kirjasto.lisaa(calling21); 
     kirjasto.lisaa(calling11); 
     kirjasto.lisaa(calling22); 
     kirjasto.lisaa(calling12); 
     kirjasto.lisaa(calling23); 
     } catch ( Exception e) {
        System.err.println(e.getMessage()); 
     }
   }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista74 
   * @throws Exception when error
   */
  @Test
  public void testPoista74() throws Exception {    // Kirjasto: 74
    alustaKirjasto(); 
    assertEquals("From: Kirjasto line: 77", 2, kirjasto.etsi("*",0).size()); 
    assertEquals("From: Kirjasto line: 78", 2, kirjasto.annaBiisit(sefa1).size()); 
    assertEquals("From: Kirjasto line: 79", 1, kirjasto.poista(sefa1)); 
    assertEquals("From: Kirjasto line: 80", 1, kirjasto.etsi("*",0).size()); 
    assertEquals("From: Kirjasto line: 81", 0, kirjasto.annaBiisit(sefa1).size()); 
    assertEquals("From: Kirjasto line: 82", 3, kirjasto.annaBiisit(sefa2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaBiisi97 
   * @throws Exception when error
   */
  @Test
  public void testPoistaBiisi97() throws Exception {    // Kirjasto: 97
    alustaKirjasto(); 
    assertEquals("From: Kirjasto line: 100", 2, kirjasto.annaBiisit(sefa1).size()); 
    kirjasto.poistaBiisi(calling11); 
    assertEquals("From: Kirjasto line: 102", 1, kirjasto.annaBiisit(sefa1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa113 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa113() throws SailoException {    // Kirjasto: 113
    Kirjasto kirjasto = new Kirjasto(); 
    Artisti angerfist1 = new Artisti(), angerfist2 = new Artisti(); 
    kirjasto.lisaa(angerfist1); 
    kirjasto.lisaa(angerfist2); 
    kirjasto.lisaa(angerfist1); 
    Collection<Artisti> loytyneet = kirjasto.etsi("",-1); 
    Iterator<Artisti> it = loytyneet.iterator(); 
    assertEquals("From: Kirjasto line: 122", angerfist1, it.next()); 
    assertEquals("From: Kirjasto line: 123", angerfist2, it.next()); 
    assertEquals("From: Kirjasto line: 124", angerfist1, it.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaBiisit186 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaBiisit186() throws SailoException {    // Kirjasto: 186
    Kirjasto kirjasto = new Kirjasto(); 
    Artisti sefa1 = new Artisti(), sefa2 = new Artisti(), sefa3 = new Artisti(); 
    sefa1.rekisteroi(); sefa2.rekisteroi(); sefa3.rekisteroi(); 
    int id1 = sefa1.getTunnusNro(); 
    int id2 = sefa2.getTunnusNro(); 
    Biisi calling11 = new Biisi(id1); kirjasto.lisaa(calling11); 
    Biisi calling12 = new Biisi(id1); kirjasto.lisaa(calling12); 
    Biisi calling21 = new Biisi(id2); kirjasto.lisaa(calling21); 
    Biisi calling22 = new Biisi(id2); kirjasto.lisaa(calling22); 
    Biisi calling23 = new Biisi(id2); kirjasto.lisaa(calling23); 
    List<Biisi> loytyneet; 
    loytyneet = kirjasto.annaBiisit(sefa3); 
    assertEquals("From: Kirjasto line: 203", 0, loytyneet.size()); 
    loytyneet = kirjasto.annaBiisit(sefa1); 
    assertEquals("From: Kirjasto line: 205", 2, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 206", true, loytyneet.get(0) == calling11); 
    assertEquals("From: Kirjasto line: 207", true, loytyneet.get(1) == calling12); 
    loytyneet = kirjasto.annaBiisit(sefa2); 
    assertEquals("From: Kirjasto line: 209", 3, loytyneet.size()); 
    assertEquals("From: Kirjasto line: 210", true, loytyneet.get(0) == calling21); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta238 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta238() throws SailoException {    // Kirjasto: 238
    Kirjasto kirjasto = new Kirjasto(); 
    Artisti sefa1 = new Artisti(); sefa1.vastaaAkuAnkka(); sefa1.rekisteroi(); 
    Artisti sefa2 = new Artisti(); sefa2.vastaaAkuAnkka(); sefa2.rekisteroi(); 
    Biisi calling21 = new Biisi(); calling21.vastaaCalling(sefa2.getTunnusNro()); 
    Biisi calling11 = new Biisi(); calling11.vastaaCalling(sefa1.getTunnusNro()); 
    Biisi calling22 = new Biisi(); calling22.vastaaCalling(sefa2.getTunnusNro()); 
    Biisi calling12 = new Biisi(); calling12.vastaaCalling(sefa1.getTunnusNro()); 
    Biisi calling23 = new Biisi(); calling23.vastaaCalling(sefa2.getTunnusNro()); 
    String hakemisto = "testihardstyle"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/artistiid.dat"); 
    File fhtied = new File(hakemisto+"/bid.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    try {
    kirjasto.lueTiedostosta(hakemisto); 
    fail("Kirjasto: 260 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjasto.lisaa(sefa1); 
    kirjasto.lisaa(sefa2); 
    kirjasto.lisaa(calling21); 
    kirjasto.lisaa(calling11); 
    kirjasto.lisaa(calling22); 
    kirjasto.lisaa(calling12); 
    kirjasto.lisaa(calling23); 
    kirjasto.tallenna(); 
    kirjasto = new Kirjasto(); 
    kirjasto.lueTiedostosta(hakemisto); 
    Collection<Artisti> kaikki = kirjasto.etsi("",-1); 
    Iterator<Artisti> it = kaikki.iterator(); 
    assertEquals("From: Kirjasto line: 273", sefa1, it.next()); 
    assertEquals("From: Kirjasto line: 274", sefa2, it.next()); 
    assertEquals("From: Kirjasto line: 275", false, it.hasNext()); 
    List<Biisi> loytyneet = kirjasto.annaBiisit(sefa1); 
    Iterator<Biisi> ih = loytyneet.iterator(); 
    assertEquals("From: Kirjasto line: 278", calling11, ih.next()); 
    assertEquals("From: Kirjasto line: 279", calling12, ih.next()); 
    assertEquals("From: Kirjasto line: 280", false, ih.hasNext()); 
    loytyneet = kirjasto.annaBiisit(sefa2); 
    ih = loytyneet.iterator(); 
    assertEquals("From: Kirjasto line: 283", calling21, ih.next()); 
    assertEquals("From: Kirjasto line: 284", calling22, ih.next()); 
    assertEquals("From: Kirjasto line: 285", calling23, ih.next()); 
    assertEquals("From: Kirjasto line: 286", false, ih.hasNext()); 
    kirjasto.lisaa(sefa2); 
    kirjasto.lisaa(calling23); 
    kirjasto.tallenna(); 
    assertEquals("From: Kirjasto line: 290", true, ftied.delete()); 
    assertEquals("From: Kirjasto line: 291", true, fhtied.delete()); 
  } // Generated by ComTest END
}