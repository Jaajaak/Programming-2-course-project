package kirjasto.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import kirjasto.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.24 15:01:34 // Generated by ComTest
 *
 */
public class ArtistiTest {



  // Generated by ComTest BEGIN
  /** testGetNimi25 */
  @Test
  public void testGetNimi25() {    // Artisti: 25
    Artisti sefa = new Artisti(); 
    sefa.vastaaAkuAnkka(); 
    { String _l_=sefa.getNimi(),_r_="Angerfist.*"; if ( !_l_.matches(_r_) ) fail("From: Artisti line: 28" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}; 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta91 */
  @Test
  public void testAseta91() {    // Artisti: 91
    Artisti artisti = new Artisti(); 
    assertEquals("From: Artisti line: 93", null, artisti.aseta(1,"Angerfist")); 
    assertEquals("From: Artisti line: 94", null, artisti.aseta(2,"137")); 
    assertEquals("From: Artisti line: 95", null, artisti.aseta(4,"1996")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi154 */
  @Test
  public void testRekisteroi154() {    // Artisti: 154
    Artisti sefa1 = new Artisti(); 
    assertEquals("From: Artisti line: 156", 0, sefa1.getTunnusNro()); 
    sefa1.rekisteroi(); 
    Artisti sefa2 = new Artisti(); 
    sefa2.rekisteroi(); 
    int n1 = sefa1.getTunnusNro(); 
    int n2 = sefa2.getTunnusNro(); 
    assertEquals("From: Artisti line: 162", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString196 */
  @Test
  public void testToString196() {    // Artisti: 196
    Artisti artisti = new Artisti(); 
    artisti.parse("   3  |  Angerfist   | 137"); 
    assertEquals("From: Artisti line: 199", true, artisti.toString().startsWith("3|Angerfist|137|"));  // on enemmäkin kuin 3 kenttää, siksi loppu |
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse221 */
  @Test
  public void testParse221() {    // Artisti: 221
    Artisti artisti = new Artisti(); 
    artisti.parse("   3  |  Angerfist   | 137"); 
    assertEquals("From: Artisti line: 224", 3, artisti.getTunnusNro()); 
    assertEquals("From: Artisti line: 225", true, artisti.toString().startsWith("3|Angerfist|137|"));  // on enemmäkin kuin 3 kenttää, siksi loppu |
    artisti.rekisteroi(); 
    int n = artisti.getTunnusNro(); 
    artisti.parse(""+(n+20));  // Otetaan merkkijonosta vain tunnusnumero
    artisti.rekisteroi();  // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
    assertEquals("From: Artisti line: 231", n+20+1, artisti.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone246 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone246() throws CloneNotSupportedException {    // Artisti: 246
    Artisti artisti = new Artisti(); 
    artisti.parse("   3  |  Angerfist  | 137"); 
    Artisti kopio = artisti.clone(); 
    assertEquals("From: Artisti line: 251", artisti.toString(), kopio.toString()); 
    artisti.parse("   4  |  Ankka Tupu   | 123"); 
    assertEquals("From: Artisti line: 253", false, kopio.toString().equals(artisti.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEquals269 */
  @Test
  public void testEquals269() {    // Artisti: 269
    Artisti artisti1 = new Artisti(); 
    artisti1.parse("   3  |  Angerfist   | 137"); 
    Artisti artisti2 = new Artisti(); 
    artisti2.parse("   3  |  Angerfist   | 137"); 
    Artisti artisti3 = new Artisti(); 
    artisti3.parse("   3  |  Happyface   | 15"); 
    assertEquals("From: Artisti line: 277", true, artisti1.equals(artisti2)); 
    assertEquals("From: Artisti line: 278", true, artisti2.equals(artisti1)); 
    assertEquals("From: Artisti line: 279", false, artisti1.equals(artisti3)); 
    assertEquals("From: Artisti line: 280", false, artisti3.equals(artisti2)); 
  } // Generated by ComTest END
}