package kirjasto.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjasto.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.24 15:48:08 // Generated by ComTest
 *
 */
public class BiisitTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta50 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta50() throws SailoException {    // Biisit: 50
    Biisit kappaleet = new Biisit(); 
    Biisi calling21 = new Biisi(); calling21.vastaaCalling(2); 
    Biisi calling11 = new Biisi(); calling11.vastaaCalling(1); 
    Biisi calling22 = new Biisi(); calling22.vastaaCalling(2); 
    Biisi calling12 = new Biisi(); calling12.vastaaCalling(1); 
    Biisi calling23 = new Biisi(); calling23.vastaaCalling(2); 
    String tiedNimi = "testihardstyle"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kappaleet.lueTiedostosta(tiedNimi); 
    fail("Biisit: 62 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kappaleet.lisaa(calling21); 
    kappaleet.lisaa(calling11); 
    kappaleet.lisaa(calling22); 
    kappaleet.lisaa(calling12); 
    kappaleet.lisaa(calling23); 
    kappaleet.tallenna(); 
    kappaleet = new Biisit(); 
    kappaleet.lueTiedostosta(tiedNimi); 
    Iterator<Biisi> i = kappaleet.iterator(); 
    assertEquals("From: Biisit line: 72", calling21.toString(), i.next().toString()); 
    assertEquals("From: Biisit line: 73", calling11.toString(), i.next().toString()); 
    assertEquals("From: Biisit line: 74", calling22.toString(), i.next().toString()); 
    assertEquals("From: Biisit line: 75", calling12.toString(), i.next().toString()); 
    assertEquals("From: Biisit line: 76", calling23.toString(), i.next().toString()); 
    assertEquals("From: Biisit line: 77", false, i.hasNext()); 
    kappaleet.lisaa(calling23); 
    kappaleet.tallenna(); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator193 */
  @Test
  public void testIterator193() {    // Biisit: 193
    Biisit kappaleet = new Biisit(); 
    Biisi calling21 = new Biisi(2); kappaleet.lisaa(calling21); 
    Biisi calling11 = new Biisi(1); kappaleet.lisaa(calling11); 
    Biisi calling22 = new Biisi(2); kappaleet.lisaa(calling22); 
    Biisi calling12 = new Biisi(1); kappaleet.lisaa(calling12); 
    Biisi calling23 = new Biisi(2); kappaleet.lisaa(calling23); 
    Iterator<Biisi> i2=kappaleet.iterator(); 
    assertEquals("From: Biisit line: 205", calling21, i2.next()); 
    assertEquals("From: Biisit line: 206", calling11, i2.next()); 
    assertEquals("From: Biisit line: 207", calling22, i2.next()); 
    assertEquals("From: Biisit line: 208", calling12, i2.next()); 
    assertEquals("From: Biisit line: 209", calling23, i2.next()); 
    try {
    assertEquals("From: Biisit line: 210", calling12, i2.next()); 
    fail("Biisit: 210 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Biisi song:kappaleet ) {
    assertEquals("From: Biisit line: 216", jnrot[n], song.getJasenNro()); n++; 
    }
    assertEquals("From: Biisit line: 219", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaBiisit234 */
  @Test
  public void testAnnaBiisit234() {    // Biisit: 234
    Biisit kappaleet = new Biisit(); 
    Biisi calling21 = new Biisi(2); kappaleet.lisaa(calling21); 
    Biisi calling11 = new Biisi(1); kappaleet.lisaa(calling11); 
    Biisi calling22 = new Biisi(2); kappaleet.lisaa(calling22); 
    Biisi calling12 = new Biisi(1); kappaleet.lisaa(calling12); 
    Biisi calling23 = new Biisi(2); kappaleet.lisaa(calling23); 
    Biisi calling51 = new Biisi(5); kappaleet.lisaa(calling51); 
    List<Biisi> loytyneet; 
    loytyneet = kappaleet.annaBiisit(3); 
    assertEquals("From: Biisit line: 247", 0, loytyneet.size()); 
    loytyneet = kappaleet.annaBiisit(1); 
    assertEquals("From: Biisit line: 249", 2, loytyneet.size()); 
    assertEquals("From: Biisit line: 250", true, loytyneet.get(0) == calling11); 
    assertEquals("From: Biisit line: 251", true, loytyneet.get(1) == calling12); 
    loytyneet = kappaleet.annaBiisit(5); 
    assertEquals("From: Biisit line: 253", 1, loytyneet.size()); 
    assertEquals("From: Biisit line: 254", true, loytyneet.get(0) == calling51); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa272 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa272() throws SailoException,CloneNotSupportedException {    // Biisit: 272
    Biisit songs = new Biisit(); 
    Biisi song1 = new Biisi(), song2 = new Biisi(); 
    song1.rekisteroi(); song2.rekisteroi(); 
    assertEquals("From: Biisit line: 278", 0, songs.getLkm()); 
    songs.korvaaTaiLisaa(song1); assertEquals("From: Biisit line: 279", 1, songs.getLkm()); 
    songs.korvaaTaiLisaa(song2); assertEquals("From: Biisit line: 280", 2, songs.getLkm()); 
    Biisi song3 = song1.clone(); 
    song3.aseta(2,"kkk"); 
    Iterator<Biisi> i2=songs.iterator(); 
    assertEquals("From: Biisit line: 284", song1, i2.next()); 
    songs.korvaaTaiLisaa(song3); assertEquals("From: Biisit line: 285", 2, songs.getLkm()); 
    i2=songs.iterator(); 
    Biisi h = i2.next(); 
    assertEquals("From: Biisit line: 288", song3, h); 
    assertEquals("From: Biisit line: 289", true, h == song3); 
    assertEquals("From: Biisit line: 290", false, h == song1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista311 
   * @throws SailoException when error
   */
  @Test
  public void testPoista311() throws SailoException {    // Biisit: 311
    Biisit kappaleet = new Biisit(); 
    Biisi calling21 = new Biisi(); calling21.vastaaCalling(2); 
    Biisi calling11 = new Biisi(); calling11.vastaaCalling(1); 
    Biisi calling22 = new Biisi(); calling22.vastaaCalling(2); 
    Biisi calling12 = new Biisi(); calling12.vastaaCalling(1); 
    Biisi calling23 = new Biisi(); calling23.vastaaCalling(2); 
    kappaleet.lisaa(calling21); 
    kappaleet.lisaa(calling11); 
    kappaleet.lisaa(calling22); 
    kappaleet.lisaa(calling12); 
    assertEquals("From: Biisit line: 324", true, kappaleet.poista(calling23)); assertEquals("From: Biisit line: 324", 3, kappaleet.getLkm()); 
    assertEquals("From: Biisit line: 325", true, kappaleet.poista(calling11)); assertEquals("From: Biisit line: 325", 2, kappaleet.getLkm()); 
    List<Biisi> h = kappaleet.annaBiisit(1); 
    assertEquals("From: Biisit line: 327", 1, h.size()); 
    assertEquals("From: Biisit line: 328", calling12, h.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaArtistinBiisit343 */
  @Test
  public void testPoistaArtistinBiisit343() {    // Biisit: 343
    Biisit kappaleet = new Biisit(); 
    Biisi calling21 = new Biisi(); calling21.vastaaCalling(2); 
    Biisi calling11 = new Biisi(); calling11.vastaaCalling(1); 
    Biisi calling22 = new Biisi(); calling22.vastaaCalling(2); 
    Biisi calling12 = new Biisi(); calling12.vastaaCalling(1); 
    Biisi calling23 = new Biisi(); calling23.vastaaCalling(2); 
    kappaleet.lisaa(calling21); 
    kappaleet.lisaa(calling11); 
    kappaleet.lisaa(calling22); 
    kappaleet.lisaa(calling12); 
    kappaleet.lisaa(calling23); 
    assertEquals("From: Biisit line: 355", 3, kappaleet.poistaArtistinBiisit(2)); assertEquals("From: Biisit line: 355", 2, kappaleet.getLkm()); 
    assertEquals("From: Biisit line: 356", 0, kappaleet.poistaArtistinBiisit(3)); assertEquals("From: Biisit line: 356", 2, kappaleet.getLkm()); 
    List<Biisi> h = kappaleet.annaBiisit(2); 
    assertEquals("From: Biisit line: 358", 0, h.size()); 
    h = kappaleet.annaBiisit(1); 
    assertEquals("From: Biisit line: 360", calling11, h.get(0)); 
    assertEquals("From: Biisit line: 361", calling12, h.get(1)); 
  } // Generated by ComTest END
}